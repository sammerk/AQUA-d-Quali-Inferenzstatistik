# Highest Density Posterior Intervals {#sec-Highest Density Posterior Intervals}
## Interaktive Visualisierung

```{shinylive-r}
#| standalone: true
#| viewerHeight: 800

library(bslib)
ui <- page_fluid(
  theme = bs_theme(
    # Controls the default grayscale palette
   # bg = "#202123",
   # fg = "#B8BCC2",
    # Controls the accent (e.g., hyperlink, button, etc) colors
    primary = "#1bbc9d",
    secondary = "#1bbc9d",
    #base_font = c("Grandstander", "sans-serif"),
    #code_font = c("Courier", "monospace"),
    #heading_font = "'Helvetica Neue', Helvetica, sans-serif",
    # Can also add lower-level customization
    "input-border-color" = "#1bbc9d"
  ),
  h5(""),
  layout_column_wrap(card(
    sliderInput(
      "prior_mu",
      "Prior Mean",
      min = 0,
      max = 1,
      value = .7,
      step = .1
    ),
    sliderInput(
      "prior_phi",
      "Prior Precision",
      min = 0,
      max = 100,
      value = 5,
      step = 1
    )
  ),
  card(
    numericInput(
      "successes",
      "Zustimmung G9",
      min = 0,
      value = 3,
      step = 1
    ),
    numericInput(
      "failures",
      "Ablehnung G9",
      min = 0,
      value = 3,
      step = 1
    )
  )),
  card(
    plotOutput("plot")#,
  #  verbatimTextOutput("debug")
    )
)


server <- function(input, output, session) {
  
### custom functions ###########################################################
# muphi_to_shapes 
muphi_to_shapes <- function(mu, phi) {
  shape1 <- mu * phi
  shape2 <- (1 - mu) * phi
  return(list(shape1 = shape1, shape2 = shape2))
}

### aux variables ##############################################################
# convert prior parameterization

prior_shapes <- reactive({
  muphi_to_shapes(input$prior_mu, input$prior_phi)
})

### plot #######################################################################
output$plot <- renderPlot({
  
  # set x-axis
  p <- seq(0,1, length=1000)
  
  # create plot
  
  
  plot(
    p,
    dbeta(p,
          prior_shapes()$shape1,
          prior_shapes()$shape2),
    type = 'l',
    col = "#1bbc9d",
    ylab = "Wahrscheinlichkeitsdichte",
    xlab = "Anteil G9-BefÃ¼rworter:innen",
    frame.plot = F,
    ylim = c(0, 
             max(c(
               dbeta(p, 
                     prior_shapes()$shape1, 
                     prior_shapes()$shape2),
               dbeta(p, 
                     prior_shapes()$shape1 + input$successes, 
                     prior_shapes()$shape2 + input$failures))
             )
             )
    )
  lines(p,
        dbeta(
          p,
          prior_shapes()$shape1 + input$successes,
          prior_shapes()$shape2 + input$failures
          ),
          col = '#EA80FC'
        )
 legend(
   bty = "n",
   .8,
   max(c(
     dbeta(p,
           prior_shapes()$shape1,
           prior_shapes()$shape2),
     dbeta(
       p,
       prior_shapes()$shape1 + input$successes,
       prior_shapes()$shape2 + input$failures
     )
   )), 
   c('Prior', 'Posterior'),
   lty = c(1, 1),
   col = c('#1bbc9d', '#EA80FC')
 )

})

### debug ######################################################################
# output$debug <- renderPrint({
#   max(c(
#                dbeta(p, 
#                      prior_shapes()$shape1, 
#                      prior_shapes()$shape2),
#                dbeta(p, 
#                      prior_shapes()$shape1 + input$successes, 
#                      prior_shapes()$shape2 + input$failures))
#              )
#              
# })

}

shinyApp(ui = ui, server = server)
```


